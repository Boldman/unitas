#+TITLE: Nix Legacy
#+DESCRIPTION: Declarative System Configurations using Nix, NixOS and Home-Manager
#+AUTHOR: Jacob Boldman
* PROJ Unitas [0/9] [0%]
This my declative system configurations for multiple systems I currently use
** Common


This file contains common configuration shared amongst all hosts.
*** Preamble
#+BEGIN_SRC nix :tangle common.nix
{ config, pkgs, options, lib, ... }:
#+END_SRC
*** Let-expression
Define variables local to the file
 - sources is defined by a file managed by Niv
#+BEGIN_SRC nix :tangle common.nix
let
  sources = import ./nix/sources.nix;
in
  {
#+END_SRC

*** Boot
Common boot parameter and settings among managed machines
 - Enable temporary directory to be put on temporary filesystem on RAM
 - Clean temporary directory on boot, in case Tmpfs setting is overridden on indiviual hosts
 - Enable memtest as boot option
 - Supported filesystems
   - NTFS for Windows formatted drives
   - NFS for connecting to network attached storage
 - Use Plymouth graphical boot screen only if system in not headless
#+BEGIN_SRC nix :tangle common.nix
    boot = {
      tmpOnTmpfs = true;
      # Clean temporary directory on boot.
      cleanTmpDir = true;
      # Make memtest available as a boot option.
      loader = {
        grub.memtest86.enable = true;
        #systemd-boot.memtest86.enable = true;
      };
      # Enable support for nfs, ntfs.
      supportedFilesystems = [ "nfs" "ntfs"];
      # Enable plymouth on graphic based machines
      plymouth.enable = !config.unitas.jak.dotfiles.headless;
    };
#+END_SRC
**** TODO mkDefaults
***** TODO Tmpfs
***** TODO cleanTmpDir
**** TODO memtest if grub || systemd-boot
**** TODO Add Ext4 to supported

*** Hardware
Controls the few common hardware settings.
 - Enable sound across machine that are not headless
 - Set font and keyboard for console, used outside of graphical system as fallback
#+BEGIN_SRC nix :tangle common.nix
    hardware = {
      pulseaudio = lib.mkIf (!config.unitas.jak.dotfiles.headless) {
        enable = true;
        #support32bit = true;
        package = pkgs.pulseaudioFull;
      };
    };
    console = {
      font = "Lat2-Terminus16";
      keyMap = "us";
    };
#+END_SRC
*** Imports
Exernal sources to include into configurations
 - scan not-detected, inherited from hardware-configuration.nix
 - Create user account and dotfiles, depends on Home-Manager
#+BEGIN_SRC nix :tangle common.nix
    imports = with sources; [
      <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
      # Always create my user account and dotfiles.
      ./users/jak
      # Import custom modules and profiles.
      # ./modules
      # ./profiles
      # Enable home-manager.
      "${home-manager}/nixos"
      # Enable dwarffs
      # "${dwarffs}/module.nix"
    ];
#+END_SRC
*** Networking
Common network setting that apply to all my hosts
#+BEGIN_SRC nix :tangle common.nix
    networking = {
      firewall = {
        allowPing = true;
        enable = true;
        pingLimit = "--limit 1/minute --limit-burst 5";
        #trustedInterfaces = [];
      };
      networkmanager.enable = true;
    };
#+END_SRC
*** Package Manager
Configurations for the Nix package manager
 - Trust my personal account and Hydra builder account
 - Automatically optimise the Nix store (used for managing and versioning programs)
 - Serve and share built packages over ssh to other Nix run hosts on the network
 - Builds are currently NOT being distributed across build machines
 - Build Machines:
 - Extra Options:
#+BEGIN_SRC nix :tangle common.nix
    nix = {
      trustedUsers = [ "jak" "hydra-queue-runner" ];
      # Automatically optimise the Nix store.
      autoOptimiseStore = true;
      # Enable serving packages over SSH when authenticated by the same keys as 'jak'.
      sshServe = {
        enable = true;
        keys = config.users.users.jak.openssh.authorizedKeys.keys;
      };
      buildMachines = [
        { hostName = "192.168.10.21";
          system = "x86_64-linux";
          maxJobs = 16;
          speedFactor = 3;
          supportedFeatures = [ "nixos-test" "benchmark" "big-parallel" ];
          mandatoryFeatures = [ ];
	      }
        ] ;
	    distributedBuilds = false;
	    # optional, useful when the builder has a faster internet connection than yours
	    extraOptions = ''
		    builders-use-substitutes = true
	      '';
    };
#+END_SRC
*** NixPkgs
Overlay the Niv managed sources file on top of default package repos
#+BEGIN_SRC nix :tangle common.nix
    # This configuration only applies to the NixOS configuration! Not home-manager or nix-shell.
    nixpkgs ={
      config = import ./nix/config.nix;
      overlays = let
        unstable = import sources.nixpkgs { config = config.nixpkgs.config; };
      in
      [
        (_: _: { inherit unstable; })
      ];
    };
#+END_SRC
*** Programs
Manage system-level programs across machines
 - Mosh: MObile SHell allows for ssh sessions to survive network disconnections
#+BEGIN_SRC nix :tangle common.nix
    programs = {
      mosh = {
        enable = true;
        withUtempter = true;
      };
    };
#+END_SRC
*** Security
Security settings to deploy to all managed hosts
 - Incorrect sudo password attempts result in random insults
#+BEGIN_SRC nix :tangle common.nix
    # Add insults to sudo
    security.sudo.extraConfig = ''
      Defaults insults
    '';
#+END_SRC
*** Services
System-level services to run on all hosts
 - cron enabled for scheduling system events
 - locate is for location services, mostly just redshift
#+BEGIN_SRC nix :tangle common.nix
    services = {
      # Enable cron jobs.
      cron.enable = true;
      locate.enable = true;
#+END_SRC
**** OpenSSH
Server component of SSH, allowing secure remote access to host
 - Forward X11 allows for remote graphical environment
 - Open port in firewal to allow for remote accesss
 - Do NOT allow password authentication, only use more secure public key authentication
 - Do NOT allow logging in as root(My user account has sudo permissions)
#+BEGIN_SRC nix :tangle common.nix
      openssh = {
        enable = true;
        forwardX11 = true;
        openFirewall = true;
        passwordAuthentication = false;
        permitRootLogin = "no";
      };
#+END_SRC
**** Xserver
Enabled if host is not a headless server.
Needed in order to enable graphical interface.
#+BEGIN_SRC nix :tangle common.nix
      xserver = lib.mkIf (!config.unitas.jak.dotfiles.headless) {
        enable = true;
        exportConfiguration = true;
        layout = "us";
      };
    };
#+END_SRC
*** Media Keys
Enbaled if host is not a headless server.
#+BEGIN_SRC nix :tangle common.nix
    sound.mediaKeys = lib.mkIf (!config.unitas.jak.dotfiles.headless) {
      enable = true;
      volumeStep = "5%";
    };
#+END_SRC
*** Time Zone
#+BEGIN_SRC nix :tangle common.nix
    time.timeZone = "America/Los_Angeles";
#+END_SRC
*** Users
Setting that apply to both all hosts and all users on those machines
 - User account are not mutable and solely managed by this configuration system.
 - manage globally available fonts
#+BEGIN_SRC nix :tangle common.nix
    users.mutableUsers = false;
    fonts = {
      enableFontDir = true;
      enableGhostscriptFonts = true;
      fonts = with pkgs; [
        corefonts
        vistafonts
        inconsolata
        terminus_font
        proggyfonts
        dejavu_fonts
        font-awesome-ttf
        ubuntu_font_family
        source-code-pro
        source-sans-pro
        source-serif-pro
      ];
    };
  }
#+END_SRC
** Nix
This file contains the configuration provided to `nixpkgs.config`. It is imported by NixOS and
home-manager and placed at `$HOME/.config/nixpkgs/config.nix`.
#+BEGIN_SRC
{
  allowUnfree = true;

  allowBroken = true;

  firefox.enableGnomeExtensions = true;

  permittedInsecurePackages = [
    "openssl-1.0.2u"
  ];
}
#+END_SRC
** Hosts
These are the hosts that are currently being managed by this system
*** TODO Iroas
#+BEGIN_SRC nix :tangle iroas.nix
{config, lib, pkgs, ...}:

{
  # This value determines the NixOS release this system is
  networking = {
    hostName = "iroas";
    networkmanager.enable = true;
  };

  system = {
    stateVersion = "20.03";
    autoUpgrade = {
      enable = true;
      channel = "https://nixos.org/channels/nixos-20.03";
    };
  };
  nix.maxJobs = lib.mkDefault 16;
  powerManagement.cpuFreqGovernor = lib.mkDefault "performance";

  imports = [ ../common.nix ];

  boot = {
    loader = {
     systemd-boot.enable = true;
     efi.canTouchEfiVariables = true;
    };
    kernelPackages = pkgs.linuxPackages_latest;
    tmpOnTmpfs = true;
    initrd.availableKernelModules = ["xhci_pci" "ahci" "ohci_pci" "ehci_pci" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
    kernelModules = [ "kvm-amd" "wl" ];
    extraModulePackages = [ config.boot.kernelPackages.broadcom_sta ];
  };

  fileSystems = {
    "/" = {
     device = "/dev/disk/by-uuid/98ec6e2f-da3a-4a78-aa5a-4f45b0e0b109";
      fsType = "ext4";
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/DC05-788E";
      fsType = "vfat";
    };
    "/tmp" = {
      device = "tmpfs";
      fsType = "tmpfs";
    };
  };

  hardware.cpu.amd.updateMicrocode = true;

  users.users.root.openssh.authorizedKeys.keys = [
  (builtins.readFile ../users/jak/public_keys/id_ed25519.pub)
  ];

  unitas.jak = {
    dotfiles.headless = false;
  };

  fonts = {
    enableFontDir = true;
    enableGhostscriptFonts = true;
    fonts = with pkgs; [
      corefonts
      vistafonts
      inconsolata
      terminus_font
      proggyfonts
      dejavu_fonts
      font-awesome-ttf
      ubuntu_font_family
      source-code-pro
      source-sans-pro
      source-serif-pro
    ];
  };
}
# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
*** TODO HalX220
**** Preamble
#+BEGIN_SRC nix :tangle halx220.nix
{config, lib, pkgs, ...}:

{
#+END_SRC

**** Networking
This section contains values used for networking, including the hostname and hostId( used for ZFS).

#+BEGIN_SRC nix :tangle halx220.nix
  # This value determines the NixOS release this system is
  networking = {
    hostName = "halX220";
    hostId = "44825cad";
  };
#+END_SRC
**** System
This section describes system specific parameters for NixOS such as Version number and automatic upgrades.
Cuurently using Unstable channel to match Home-Manager.

#+BEGIN_SRC nix :tangle halx220.nix
  system = {
    stateVersion = "20.03";
    autoUpgrade = {
      enable = true;
      channel = "https://nixos.org/channels/nixos-unstable";
    };
  };
  nix.maxJobs = lib.mkDefault 1;
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
#+END_SRC
**** Imports
Import the common configuration and any hardware specific configuration.

#+BEGIN_SRC nix :tangle halx220.nix

  imports = [ ../common.nix ];
#+END_SRC
**** Bootloader
Currently use UEFI systemd-bootloader and the latest stable kernel packages. Contains Intel i5 CPU so adding
Supported Filesystem:
 - XFS: Current filesystem
 - Ext4: Common Linux filesystem, have external hard drives using this format
 - ZFS: Testing this filesystem on desktop, included here for interoperablity

#+BEGIN_SRC nix :tangle halx220.nix
  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
    kernelPackages = pkgs.linuxPackages_latest;
    initrd.availableKernelModules = [ "ehci_pci" "ahci" "sd_mod" "sdhci_pci"];
    kernelModules = [ "kvm-intel" ];
    supportedFilesystems = [ "xfs" "ext4" "zfs"];
  };
#+END_SRC

**** Filesystems
This section describes the mounted filesystem on this host
These are both XFS, with seperate partitions for /home to allow for reinstall without erasing it.
This host does not contain a swap partition.

#+BEGIN_SRC nix :tangle halx220.nix
  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/754c12bf-cabc-4fa2-b73c-1e8cc494a9a9";
      fsType = "xfs";
    };
    "/home" = {
      device = "/dev/disk/by-uuid/b953f985-7765-4010-8a7b-eb416bacb213";
      fsType = "xfs";
    };
  };

  swapDevices = [ ];
#+END_SRC
**** Hardware
Flags for hardware specific to this host
 - Host is a thinkpad so includes trackpoint wheel emulation
 - Intel microcode updates are turned on for CPU

#+BEGIN_SRC nix :tangle halx220.nix
  hardware = {
    cpu.intel.updateMicrocode = true;
    trackpoint.emulateWheel = true;
  };
#+END_SRC

**** Services
Services that are unique to this host
 - fprintd is enabled to use this host's fingerprint reader for authentication (login, sudo, etc...)
 - TLP is enabled for smart powermanagemnet for host laptop
 - UPower is enable for detailed power consumption reports
 - Gnome Keyring is enabled as a dependance for other programs
#+BEGIN_SRC nix :tangle halx220.nix
  services = {
    fprintd.enable = true;
    tlp.enable = true;
    upower.enable = true;
    gnome3.gnome-keyring.enable = true;
  };
#+END_SRC
***** TODO Gnome Keyring (determine what depends on it)

**** Security
Security measures for this host
 - Require password to use sudo, since host is laptop
 - Enable fingerprint reader authentication for my user in order to login and lock screen
#+BEGIN_SRC nix :tangle halx220.nix
  security = {
    sudo.wheelNeedsPassword = true;
    pam.services = {
      login.fprintAuth = true;
      xscreensaver.fprintAuth = true;
      jak.fprintAuth = true;
    };
  };
#+END_SRC

**** Internal
These are host specific variables for internal use with the Unitas config system
#+BEGIN_SRC nix :tangle halx220.nix
  unitas = {
    jak = {
      email.address = "boldman@linux.com";
      dotfiles.headless = false;
    };
  };
}

# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC

*** TODO Jacob
** User
*** Default
This file creates my user on systems
**** Preamble
#+BEGIN_SRC nix :tangle ./user/jak/default

{ config, pkgs, lib, ...}:

# This file contains a NixOS module for creating my user account and dotfiles.

let
  cfg = config.unitas.jak;
in
{
  options.unitas.jak = import ./options.nix { inherit config; inherit lib; };

  config = {
    # This option can be set automatically here for all NixOS hosts, it must be set manually for non-NixOS hosts.
    unitas.jak.hostName = config.networking.hostName;

    home-manager.users.jak = { config, pkgs, libs, ...}: {
      imports = [ ./home ];

      # Add the `unitas.jak` configuration options that are set in NixOS.
      options.unitas.jak = import ./options.nix {inherit config; inherit lib; };
      config.unitas.jak = cfg;
    };

    # Require to use zsh
    programs.fish.enable = true;

    #Create user account.
    users = {
      motd = with config; ''
        Welcome to ${networking.hostName}
        - This machine is managed by NixOS
        - All changes are futile
        OS:      NixOS ${system.nixos.release} (${system.nixos.codeName})
        Version: ${system.nixos.version}
        Kernel:  ${boot.kernelPackages.kernel.version}
      '';
      users.jak = {
        description = cfg.name;
        extraGroups = [
          "audio"
          "disk"
          "docker"
          "input"
          "libvirtd"
          "lxd"
          "plugdev"
          "systemd-journal"
          "vboxusers"
          "video"
          "wheel"
        ];
        uid = 1000;
        shell = pkgs.unstable.fish;
        hashedPassword = "$6$.Ak8UwJF1v13lZ$Ji0WeEg1ssLxLbZRZOM6g5Ltggp5hpq32.crWz0tRlfTauQERv5CdBaGGClRBskU0BnpncJJIxe5SS8/6O9Ko1";
        isNormalUser = true;
        openssh.authorizedKeys.keys = [
          (builtins.readFile ./public_keys/id_ed25519.pub)
        ];
      };
    };
  };
}

# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
*** Option
#+BEGIN_SRC nix

{ config, lib, ...}:

# This file contains the definition for the "unitas.jak" configuration options.

with lib;
let
  # Helper function to define an option for a color
  mkColor = description: default: mkOption {
    inherit default;
    description = ''
      Define the color for ${description}. Must be a hexidecimal representation, without leading pound sign.
      '';
      example = "FFFFFF";
      type = types.str;
    };
    #Helper function to construct a color with a foreground and background component.
    mkColorWithFgBg = description: fgHex: bgHex: {
      bg = mkColor "the background color of ${definition}" bgHex;
      fg = mkColor "the foreground color of ${definition}" fgHex;
    };
    #Short variable to access color configuration.
    colors = config.unitas.jak.colorScheme;
in
  {
    # Define color scheme.
    colorScheme = {
      # Basic sixteen color definitions for the color scheme
      basic = {
        background = mkColor "background" "1C1C1C";
        cursor = mkColor "foreground" colors.basic.foreground;
        foreground = mkColor "foreground" "C5C8C6";
        black = mkColor "black" "282A2E";
        red = mkColor "red" "A54242";
        green = mkColor "green" "8C9440";
        yellow = mkColor "yellow" "DE935F";
        blue = mkColor "blue" "5F819D";
        magenta = mkColor "magenta" "85678F";
        cyan = mkColor "cyan" "5E8D87";
        white = mkColor "white" "707880";
        # Bright colors.
        brightBlack = mkColor "bright black" "373B41";
        brightRed = mkColor "bright red" "CC6666";
        brightGreen = mkColor "bright green" "B5BD68";
        brightYellow = mkColor "bright yellow" "F0C674";
        brightBlue = mkColor "bright blue" "81A2BE";
        brightMagenta = mkColor "bright magenta" "B294BB";
        brightCyan = mkColor "bright cyan" "8ABEB7";
        brightWhite = mkColor "bright white" "C5C8C6";
      };
      # colors specific to Delta.
      delta = {
        minus = {
          regular = mkColor "delta's minus" "260808";
          emphasised = mkColor "delta's emphasised minus" "3f0d0d";
        };
        plus = {
          regular = mkColor "delta's plus" "0b2608";
          emphasised = mkColor "delta's emphasised plus" "123f0d";
        };
      };
      # colors specific to i3.
      i3 = {
        highlight = mkColor "i3's highlight" colors.basic.red;
        highlightBright = mkColor "i3's bright highlight" colors.basic.brightRed;
      };
      # colors specific to Starship.
      #
      # Starship seems to mangle the color slightly, so this hex produces the same
      # "optical" color as the regular muted grey used throughout the configuration.
      starship.mutedGrey = mkColor "starship's muted grey" "6B6B6B";
      # colors specific to Neovim.
      neovim = {
        termdebugProgramCounter = mkColor "termdebug's gutter breakpoint indicator"
          colors.neovim.termdebugBreakpoint.bg;
        termdebugBreakpoint = mkColorWithFgBg "termdebug's current line" "B2B2B2" "2B2B2B";
      };
      # colors specific to the xsession.
      xsession.wallpaper = mkColor "wallpaper" "121212";
    };

    domain = mkOption {
      type = types.str;
      default = "boldman.co";
      description = "Domain used in configuration files, such as `.gitconfig`";
    };

    dotfiles = {
      autorandrProfile = mkOption {
        type = types.attrs;
        description = "Configuration for autorandr";
      };

      headless = mkOption {
        type = types.bool;
        default = true;
        description = "Is this a headless host?";
      };

      isWsl = mkOption {
        type = types.bool;
        default = false;
        description = "Is this a WSL host?";
      };

      isNonNixOS = mkOption {
        type = types.bool;
        default = config.unitas.jak.dotfiles.isWsl;
        description = "Is this a non-NixOS host?";
      };

      minimal = mkOption {
        type = types.bool;
        default = false;
        description = "Omit parts of configuration that are expensive to build?";
      };
    };

    email = {
      enable = mkOption {
        type = types.bool;
        default = false;
        description = "Enable email from this host?";
      };
      address = mkOption {
        type = types.str;
        default = "jak@${config.unitas.jak.domain}";
        description = "Email used in configuration files.";
      };
    };

    hostName = mkOption {
      type = types.str;
      description = "Name of the host";
    };

    name = mkOption {
      type = types.str;
      default = "Jacob Boldman";
      description = "Name used in configuration files.";
    };
  }
#+END_SRC
*** Home
**** Default
#+BEGIN_SRC nix :tangle ./users/jak/home/default.nix
{ config, pkgs, lib, ...}:

{
  imports = [
#    ./alacritty.nix
    ./compton.nix
    ./direnv.nix
    ./dunst.nix
    ./emacs.nix
    ./firefox.nix
    ./fish.nix
    ./fzf.nix
    ./git.nix
    ./home-manager.nix
    ./htop.nix
    ./i3.nix
    ./language.nix
    ./less.nix
    ./lorri.nix
    ./mpd.nix
    ./mpv.nix
    ./neovim.nix
    ./packages.nix
    ./polybar.nix
    ./rofi.nix
#    ./starship.nix
    ./sxhkd.nix
    ./taskwarrior.nix
    ./termite.nix
    ./tmux.nix
    ./xsession.nix
  ];

  # This configuration only applies to home-manager, not NixOS or nix-shell.
  nixpkgs = {
    config = import ../../../nix/config.nix;
    overlays = let
      sources = import ../../../nix/sources.nix;
      unstable = import sources.nixpkgs { config = config.nixpkgs.config; };
    in
      [
        (_: _: { inherit unstable; })
        (import sources.nixpkgs-mozilla)
        (
          _: super: {
            niv = (import sources.niv {}).niv;
            ormolu = (import sources.ormolu {}).ormolu;
          }
        )
      ];
    };

    xdg.configFile."nixpkgs/config.nix".source = ../../../nix/config.nix;
  }


#+END_SRC
**** Alacritty
#+BEGIN_SRC nix :tangle ./users/jak/home/alacritty

{ pkgs, ... }:

{
  programs.alacritty = {
    enable = true;

    settings = {
      window = {
        title = "Terminal";
        dimensions = {
          lines = 75;
          columns = 100;
        };
      };

      font = {
        normal.family = "FuraCode Nerd Font";
        size = 8.0;
      };

      background_opacity = 0.7;

      shell = {
        program = "${pkgs.fish}/bin/fish";
      };

      colors = {
        primary = {
          background = "0x000000";
          foreground = "0xEBEBEB";
        };
        cursor = {
          text   = "0xFF261E";
          cursor = "0xFF261E";
        };
        normal = {
          black   = "0x040404";
          red     = "0x54534d";
          green   = "0x704f2d";
          yellow  = "0x706451";
          blue    = "0x7d7360";
          magenta = "0xb09063";
          cyan    = "0x5b656b";
          white   = "0xc6c5c0";
        };
        bright = {
          black   = "0x040404";
          red     = "0x696860";
          green   = "0x886138";
          yellow  = "0x877861";
          blue    = "0x948974";
          magenta = "0xCCA773";
          cyan    = "0x737F86";
          white   = "0xc6c5c0";
        };
      };
    };
  };
}
#+END_SRC
**** Command Not Found
#+BEGIN_SRC nix :tangle ./users/jak/home/command-not-found.nix
{ pkgs, ... }:
{
  programs.command-not-found.enable = true;
}
#+END_SRC
**** Compton
#+BEGIN_SRC nix :tangle ./users/jak/home/compton.nix
{ ... }:

{
services.compton =
  {
    enable = true;
    package = import ./compton-tryone.nix;

    blur = true;
    blurExclude = [ "window_type = 'dock'" "window_type = 'desktop'" ];

    fade = true;
    fadeDelta = 5;

    shadow = true;
    shadowOffsets = [ (-7) (-7) ];
    shadowOpacity = "0.7";
    shadowExclude = [ "window_type *= 'normal' && ! name ~= ''" ];
    noDockShadow = true;
    noDNDShadow = true;

    activeOpacity = "1.0";
    inactiveOpacity = "0.8";
    menuOpacity = "0.8";

    backend = "glx";
    vSync = "opengl";

    extraOptions = ''
      shadow-radius = 7;
      clear-shadow = true;
      frame-opacity = 0.7;
      blur-method = "kawase";
      blur-strength = 8;
      alpha-step = 0.06;
      detect-client-opacity = true;
      detect-rounded-corners = true;
      paint-on-overlay = true;
      detect-transient = true;
      mark-wmwin-focused = true;
      mark-ovredir-focused = true;

      wintypes :
      {
        tooltip :
        {
          fade = true;
          shadow = false;
          opacity = 0.75;
          focus = true;
        };
      };
    '';
  };
}
#+END_SRC
**** Tyrone
#+BEGIN_SRC nix :tangle ./users/jak/home/compton-tyrone.nix

with import <nixpkgs> {};
with xorg;

stdenv.mkDerivation rec {
  name = "compton-tryone";
  version = "241bbc5";

  COMPTON_VERSION = "v${version}";

  src = builtins.fetchGit {
    url = "https://github.com/Litarvan/compton.git";
    rev = "d9d7d1d38c021297eb488c8c5f18156a49563dce";
    ref = "dual_kawase";
  };

  nativeBuildInputs = [
    pkg-config gnumake xorgproto git
    asciidoc docbook_xml_dtd_45 docbook_xsl
  ];

  buildInputs = [
    libX11 libXcomposite libXdamage libXfixes libXext
    libXrender libXrandr libXinerama xwininfo xprop
    pcre libconfig libdrm libGL dbus libxml2 libxslt
  ];

  preBuild = ''
    git() { echo "$COMPTON_VERSION"; }
    export -f git
  '';

  installFlags = [ "PREFIX=$(out)" ];
}
#+END_SRC
**** DirEnv
#+BEGIN_SRC nix :tangle ./users/jak/home/direnv.nix

{ pkgs, ...}:

# This file contains the configuration for direnv.

{
  #Qiuets command line output from direnv
  home.sessionVariables = { "DIRENV_LOG_FORMAT" = ""; };

  programs.direnv = {
    enable = true;
    enableFishIntegration = true;
    enableZshIntegration = true;
  };
}
# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Dunst
#+BEGIN_SRC nix :tangle ./users/jak/home/dunst.nix

{ config, pkgs, ...}:

# This file contains the configuration for dunst.

{
  services.dunst= {
    enable = true;

  };
}
# vim:filesystem=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Feh
#+BEGIN_SRC nix :tangle ./users/jak/home/feh.nix

{ config, pkgs, ... }:

# This file contains the configuration for feh.

{
  programs.feh.enable = true;
}
#+END_SRC
**** Firefox
#+BEGIN_SRC nix :tangle ./users/jak/home/firefox.nix
{ config, pkgs, ...}:

# This file contains the configuration for firefox.

{
  home.sessionVariables = { "BROWSER" = "${pkgs.firefox}/bin/firefox"; };

  programs.firefox = {
    enable = true;
    package = pkgs.firefox;
    };
}
#+END_SRC
**** Fish

#+BEGIN_SRC nix :tangle ./users/jak/home/fish.nix
 { pkgs, config, lib, ... }:

# This file contains the configuration for fish.

with lib;
{
  programs.fish = {
    enable = true;
    interactiveShellInit = with config.unitas.jak.colorScheme.basic; ''
      # Disable the greeting message.
      set fish_greeting
      # Set environment variables.
      set -x COLORTERM truecolor
      set -x TERM xterm-256color
      # Use vi keybinds.
      fish_vi_key_bindings
      # Use hybrid color scheme.
      set fish_color_autosuggestion ${white}
      set fish_color_command ${brightYellow}
      set fish_color_comment ${brightGreen}
      set fish_color_cwd ${green}
      set fish_color_cwd_root ${red}
      set fish_color_end ${brightMagenta}
      set fish_color_error ${brightRed}
      set fish_color_escape ${brightCyan}
      set fish_color_operator ${brightCyan}
      set fish_color_param ${green}
      set fish_color_quote ${brightGreen}
      set fish_color_redirection ${cyan}
      set fish_color_status ${red}
      set fish_color_user ${brightGreen}
      set fish_color_description ${magenta}
    '' + (
      optionalString config.unitas.jak.dotfiles.isNonNixOS ''
        # Needed for `home-manager switch` to work.
        set -x NIX_PATH ${config.home.homeDirectory}/.nix-defexpr/channels\''${NIX_PATH:+:}$NIX_PATH
      ''
    );
    package = pkgs.unstable.fish;
    shellAliases = with pkgs; {
      # Make `rm` prompt before removing more than three files or removing recursively.
      "rm" = "${coreutils}/bin/rm -i";
      # Aliases that make commands colorful.
      "grep" = "${gnugrep}/bin/grep --color=auto";
      "fgrep" = "${gnugrep}/bin/fgrep --color=auto";
      "egrep" = "${gnugrep}/bin/egrep --color=auto";
      # Aliases for `cat` to `bat`.
      "cat" = "${bat}/bin/bat --paging=never -p";
      # Aliases for `ls` to `exa`.
      "ls" = "${exa}/bin/exa";
      "dir" = "${exa}/bin/exa";
      "ll" = "${exa}/bin/exa -alF";
      "vdir" = "${exa}/bin/exa -l";
      "la" = "${exa}/bin/exa -a";
      "l" = "${exa}/bin/exa -F";
      # Extra Git subcommands for GitHub.
      "git" = "${gitAndTools.hub}/bin/hub";
      # Common mistake when looking up ip address info
      "ipa" = "ip address";
    };
  };
}
#+END_SRC

**** Fonts
#+BEGIN_SRC nix :tangle ./users/jak/home/fonts.nix

{ config, pkgs, lib, ... }:

# This file installs fonts and enables fontconfig.

{

  home.packages = lib.lists.optionals (!config.veritas.david.dotfiles.headless) (
    with pkgs; [
      meslo-lg
      source-code-pro
      source-sans-pro
      source-serif-pro
      font-awesome_5
      inconsolata
      siji
      material-icons
      powerline-fonts
      roboto
      roboto-mono
      roboto-slab
      iosevka
    ]
  );
}

#+END_SRC
**** Fzf
#+BEGIN_SRC nix :tangle ./users/jak/home/fzf.nix

{ config, pkgs, ...}:

# This file contains the configuration for fzf.

{
  home.sessionVariables = {
    # Configure fzf to use ripgrep.
    "FZF_DEFAULT_COMMAND" =
      "${pkgs.ripgrep}/bin/rg --files --hidden --follow -g \"!{.git\" 2>/dev/null";
    "FZF_CTRL_T_COMMAND" = config.home.sessionVariables."FZF_DEFAULT_COMMAND";
    "FZF_DEFAULT_OPTS" = "";
  };

  programs.fzf.enable = true;

}
# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Git
#+BEGIN_SRC nix :tangle ./users/jak/home/git.nix

{ config, pkgs, ...}:

# This file contains the configurations for git.

let
  cfg = config.unitas.jak;
in
{
  home.packages = with pkgs.gitAndTools; [ git-bug git-dit ];
  programs.git = {
    aliases = {
      ps = "push";
      save = "stash save --include-untracked";
    };
    enable = true;
    package = pkgs.gitAndTools.gitFull;
    userEmail = cfg.email.address;
    userName = cfg.name;
  };
}

# vim:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Home Manager
#+BEGIN_SRC nix :tangle ./users/jak/home/home-manager.nix

{ config, pkgs, ...}:

# This file contains the configuration for home-manager.

{
  # Set the `stateVersion` for home-manager.
  home.stateVersion = "19.09";

  # Let home-manager manage itself when not using home-manager as a NixOS module.
  programs.home-manager.enable = config.unitas.jak.dotfiles.isNonNixOS;
}
# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Htop
#+BEGIN_SRC nix :tangle ./users/jak/home/htop.nix

{ pkgs, ... }:

# This file contains the configuration for htop.

{
  programs.htop = {
    enable = true;
    detailedCpuTime = true;
    showThreadNames = true;
    treeView = true;
  };
}

# vim:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** i3
#+BEGIN_SRC nix :tangle ./users/jak/home/i3.nix

# File created by Jacob Boldman
{config, pkgs, ...}:
let
  cfg = config.xsession.windowManager.i3.config;
  colors = config.unitas.jak.colorScheme;
  modifier = config.xsession.windowManager.i3.config.modifier;
  workspaces = {
    one     = "1";
    two     = "2";
    three   = "3";
    four    = "4";
    five    = "5";
    six     = "6";
    seven   = "7";
    eight   = "8";
    nine    = "9";
  };
in
{
  xsession.windowManager.i3 = {
    enable = true;
    package = pkgs.i3-gaps;
    config = {
      modifier = "Mod4";
      gaps = {
        inner = 15;
        outer = 15;
        smartBorders = "on";
        smartGaps = true;
      };
      bars =[];
      keybindings = {
        # Open terminal. should remove for ./sxhkd.nix
        "${modifier}+Return"        = "exec i3-sensible-terminal";
        # Open application launcher.
        "${modifier}+p"             = "exec ${pkgs.rofi}/bin/rofi -show drun";
        # Switch workspaces
        "${modifier}+1"             = "workspace ${workspaces.one}";
        "${modifier}+2"             = "workspace ${workspaces.two}";
        "${modifier}+3"             = "workspace ${workspaces.three}";
        "${modifier}+4"             = "workspace ${workspaces.four}";
        "${modifier}+5"             = "workspace ${workspaces.five}";
        "${modifier}+6"             = "workspace ${workspaces.six}";
        "${modifier}+7"             = "workspace ${workspaces.seven}";
        "${modifier}+8"             = "workspace ${workspaces.eight}";
        "${modifier}+9"             = "workspace ${workspaces.nine}";
        # Move containers between workspaces.
        "${modifier}+Shift+1"= "move container to workspace ${workspaces.one}";
        "${modifier}+Shift+2"= "move container to workspace ${workspaces.two}";
        "${modifier}+Shift+3"= "move container to workspace ${workspaces.three}";
        "${modifier}+Shift+4"= "move container to workspace ${workspaces.four}";
        "${modifier}+Shift+5"= "move container to workspace ${workspaces.five}";
        "${modifier}+Shift+6"= "move container to workspace ${workspaces.six}";
        "${modifier}+Shift+7"= "move container to workspace ${workspaces.seven}";
        "${modifier}+Shift+8"= "move container to workspace ${workspaces.eight}";
        "${modifier}+Shift+9"= "move container to workspace ${workspaces.nine}";
        # Switch into resize mode.
        "${modifier}+r"= "mode resize";
        # Switch between layouts.
        "${modifier}+o"             = "layout toggle split";
        "${modifier}+i"             = "layout tabbed";
        "${modifier}+u"             = "layout stacking";
        "${modifier}+f"             = "fullscreen toggle";
        "${modifier}+Shift+space"   = "floating toggle";
        "${modifier}+n"             = "split v";
        "${modifier}+m"             = "split h";

        "${modifier}+Shift+q" = "kill";
      };
    };
    extraConfig = with pkgs; let
      i3msg = "${config.xsession.windowManager.i3.package}/bin/i3-msg";
      defaultWorkspace = "workspace ${workspaces.one}";
    in
      ''
        # Instead of using `assigns` and `startup` to launch applications on startup, use exec with
        # i3-msg. This will avoid having *every* instance of these applications start on the assigned
        # workspace, only the initial instance.
        exec --no-startup-id ${i3msg} 'workspace ${workspaces.one}; exec ${alacritty}/bin/alacritty; ${defaultWorkspace}'
        exec --no-startup-id ${i3msg} 'workspace ${workspaces.two}; exec ${firefox}/bin/firefox; ${defaultWorkspace}'

        # Always put the first workspace on the primary monitor.
        ${defaultWorkspace} output primary
      '' + lib.strings.optionalString config.services.polybar.enable ''
        # Reload polybar so that it can connect to i3.
        exec --no-startup-id '${systemd}/bin/systemctl --user restart polybar'
      '';
  };
}
#vim:filetype=nix
#+END_SRC
**** Language Settings
#+BEGIN_SRC nix :tangle ./users/jak/home/language.nix

{ config, pkgs, ... }:

# This file contains the configuration for languages, locales and keyboard layouts.

{
  home = {
    # Use a US keyboard layout.
    keyboard.layout = "us";
    # Set `en_US.utf8` as the locale.
    language.base = "en_US.utf8";
    packages = with pkgs; [ glibcLocales ];
    sessionVariables = {
      "LOCALE_ARCHIVE" = "${pkgs.glibcLocales}/lib/locale/locale-archive";
      "LANGUAGE" = config.home.language.base;
      "LC_ALL" = config.home.language.base;
    };
  };
}

# vim:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Less
#+BEGIN_SRC nix :tangle ./users/jak/home/less.nix

{ pkgs, ... }:

# This file contains the configuration for less.

{
  # Allow scrolling left and right with `h` and `l` in `less`.
  home.file.".lesskey".text = ''
    h left-scroll
    l right-scroll
  '';
}

# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Lorri
#+BEGIN_SRC nix :tangle ./users/jak/home/lorri.nix

{ pkgs, config, lib, ... }:

# This file contains the configuration for lorri.

{
  services.lorri.enable = true;

  systemd.user.services.lorri."Service"."Environment" = with lib; let
    # Override default path to include `git` and `mercurial`.
    path = with pkgs; makeSearchPath "bin" [ nix gnutar gzip git mercurial ];
  in
    # Add `RUST_BACKTRACE=1` too.
    mkForce (concatStringsSep " " [ "PATH=${path}" "RUST_BACKTRACE=1" ]);
}

# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap


#+END_SRC
**** Manpages
#+BEGIN_SRC nix :tangle ./users/jak/home/manpages.nix

{ pkgs, ... }:

# This file contains the configuration for manpages.

{
  # Don't clear the screen when leaving man.
  home.sessionVariables."MANPAGER" = "less -X";
  # Install home-manager manpages.
  manual.manpages.enable = true;
  # Install man output for any Nix packages.
  programs.man.enable = true;
}

# vim:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** MPD
#+BEGIN_SRC nix :tangle ./users/jak/home/mpd.nix

{ config, pkgs, ...}:

# This file contains the configuration for Music Player Daemon.

{
  services.mpd = {
    enable = true;
  };
}
# vim:filesystem=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** MPV
#+BEGIN_SRC nix :tangle ./users/jak/home/mpv.nix

{ config, pkgs, ...}:

# This file contains the configuration for fzf.

{

  programs.mpv.enable = true;

}
# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Packages
#+BEGIN_SRC nix :tangle ./users/jak/home/packages.nix

{ config, pkgs, lib, ...}:

# This file contains the configuration for default-installed packages.

let
  sources = import ../../../nix/sources.nix;
in
  with lib.lists; with pkgs; {
    home.packages = [
      # Determine file type.
      file
      # Show full path of shell commands.
      cron
      # Collection of useful tools that aren't coreutils.
      moreutils
      # Non-interactive network downloader.
      wget
      # Return metainformation about installed libraries.
      pkgconfig
      # Tools for querying id database.
      idutils
      # List directory contents in tree-like format.
      tree
      # Interactive process viewer.
      htop
      # Top-like I/O monitor.
      iotop
      # Power consumption and management diagnosis tool.
      powertop
      # Library call tracer
      ltrace
      # System call tracer
      strace
      # Tools for manipulating binaries.
      binutils
      # List hardware
      lshw
      # Performance analysis tools.
      linuxPackages.perf
      # Collection of programs for inspecting/manipulating configuration of PCI devices.
      pciutils
      # Collection of utilities using proc filesystem (`pstree`, `killall`, etc.)
      psmisc
      # DMI table decoder.
      dmidecode
      # Tools for working with usb devices
      usbutils
      # Collection of common network programs
      inetutils
      # Mobile shell with roaming and intelligent local echo.
      mosh
      # Bandwidth monitor and rate estimator.
      bmon
      # DNS server
      bind
      # Connection tracking userspace tools.
      conntrack-tools
      #Dump traffic on a network.
      tcpdump
      # Query/control network driver and hardware settings.
      ethtool
      # eBPF tracing language and frontend.
      #linuxPackages.bpftrace
      # Partition manipulation program.
      parted
      # exFAT filesystem implementation.
      exfat
      # Utilities for creating/checking FAT/VFAT filesystems.
      dosfstools
      # ncurses disk usage
      ncdu
      # Hard-drive health monitoring.
      smartmontools
      # Compress/uncompress `.zip` files.
      unzip
      zip
      # Uncompress `.rar` files.
      unrar
      # Compress/uncompress `.7z` files.
      p7zip
      # Man pages
      man
      man-pages
      posix_man_pages
      stdman
      # Benchmarking.
      hyperfine
      # Codebase statistics
      tokei
      # Source `.envrc` when entering a directory.
      direnv
      # Arbitrary-precision calculator
      bc
      # Password manager
      #bitwarden-cli
      # Copy files/archives/repositories into the nix store.
      nix-prefetch-scripts
      # Index the nix store (provides `nix-locate`).
      nix-index
      # Eases nixpkgs review workflow.
      nix-review
      # grep alternative
      ripgrep
      # ls alternative
      exa
      # cat alternative
      bat
      # Git wrapper that provides Github specific commands
      gitAndTools.hub
      # quicker access to files and directories
      fasd
      # Incremental git merging/rebasing
      gitAndTools.git-imerge
      # Tools for manipulating patch files
      patchutils
      # Alternative version control systems
      mercurial
      bazaar
      subversion
      # GnuPG
      gnupg
      # Keybase
      keybase
      # Utility for creating gists from stdout
      gist
      # Personal project for managing working directories
      # A command-line tool to generate, analyze, convert, and manipulate colors
      unstable.pastel
      # ClusterSSH with tmux
      tmux-cssh
      # Tool for indexing, slicing, analyzing, splitting and joining CSV files
      xsv
      # Simple, fast, and user-friendly alternative to find
      fd
      # More intuitive du
      du-dust
      #Yet another diff highlighting tool
      unstable.diffr
      # cat for markdown
      unstable.mdcat
      # command line image viewer
      unstable.viu
      # toll for discovering and probing hosts on a network
      arping
      # dependency mgmt for nix projects
      niv
      # Visualize Nix gc-roots to delete to free space
      unstable.nix-du
      # Reading hardware sensors
      lm_sensors
      # Hakell toolchain manager - normally wouldn't install this globally and instead rely on
      # `shell.nix` files, but using the Nix-integration in stack is easier and avoids the
      # downsides of having stack installed globally for my purposes
      unstable.stack
      # NFS debugging utilities
      nfsUtils
      # Generate `requirements.nix` from `requirements.txt` for Python projects
      pypi2nix
    ] ++ optionals (!config.unitas.jak.dotfiles.headless) [
      # Multiple-service messaging app
      # unstable.franz
      # Mozilla Firefox
      # Remmina is a remote desktop client written in GTK+
      remmina
      # Create simple animated gifs
      peek
      # XSel is a command-line program for getting and setting contents of the X selection
      xsel
      # Scrot is a minimalist command line screen capturing application
      scrot
      # Simple volume control tools for the PulseAudio sound server
      pavucontrol
      # Simple configuration dialog for the PulseAudio sound server
      paprefs
      # Provides and interface to X selections from the command line
      xclip
      # Monitor temperatures
      psensor
    ];
}
# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Polybar
#+BEGIN_SRC nix :tangle ./users/jak/home/polybar.nix

{ pkgs, ... }:

# Created By @icanwalkonwater
# Edited and ported to Nix by Th0rgal

let
  ac = "#1E88E5";
  mf = "#383838";

  bg = "${xrdb:background}";
  fg = "#FFFFFF";

  # Colored
  primary = "#ffb973";

  # Dark
  secondary = "#140e0a";

  # Colored (light)
  tertiary = "#74c2d4";

  # white
  quaternary = "#ecf0f1";

  # middle gray
  quinternary = "#384245";

  # Red
  urgency = "#e74c3c";
in
  {
    services.polybar = {
      enable = true;

      package = pkgs.polybar.override {
        i3GapsSupport = true;
        alsaSupport = true;
      };

      script = "polybar -q -r top & polybar -q -r bottom &";

      config = {
        "global/wm" = {
          margin-bottom = 0;
          margin-top = 0;
        };

  #====================BARS====================#

        "bar/top" = {
          bottom = false;
          fixed-center = true;

          width = "100%";
          height = 19;
          offset-x = "1%";

          scroll-up = "i3wm-wsnext";
          scroll-down = "i3wm-wsprev";

          background = bg;
          foreground = fg;

          radius = 0;

          font-0 = "FuraCode Nerd Font:size=12;3";
          font-1 = "FuraCode Nerd Font:style=Bold:size=12;3";

          modules-left = "distro-icon dulP ddrT i3 dulT";
          modules-center = "title";
          modules-right = "durT audio ddlT date";

          locale = "en_US.UTF-8";
        };

        "bar/bottom" = {
          bottom = true;
          fixed-center = true;

          width = "100%";
          height = 19;

          offset-x = "1%";

          background = bg;
          foreground = fg;

          radius-top = 0;

          tray-position = "left";
          tray-detached = false;
          tray-maxsize = 15;
          tray-background = primary;
          tray-offset-x = -19;
          tray-offset-y = 0;
          tray-padding = 5;
          tray-scale = 1;
          padding = 0;

          font-0 = "FuraCode Nerd Font:size=12;3";
          font-1 = "FuraCode Nerd Font:style=Bold:size=12;3";

          modules-left = "powermenu ddlS";

          modules-right = "ddrS cpu dulS ddrT memory dulT ddrP battery";

          locale = "en_US.UTF-8";
        };

        "settings" = {
          throttle-output = 5;
          throttle-output-for = 10;
          throttle-input-for = 30;

          screenchange-reload = true;

          compositing-background = "source";
          compositing-foreground = "over";
          compositing-overline = "over";
          comppositing-underline = "over";
          compositing-border = "over";

          pseudo-transparency = "false";
        };

  #--------------------MODULES--------------------"

        "module/distro-icon" = {
          type = "custom/script";
          exec = "${pkgs.coreutils}/bin/uname -r | ${pkgs.coreutils}/bin/cut -d- -f1";
          interval = 999999999;

          format = " <label>";
          format-background = primary;
          format-foreground = secondary;
          format-padding = 1;
          label = "%output%";
          label-font = 2;
        };

        "module/audio" = {
          type = "internal/alsa";

          format-volume = "墳 VOL <label-volume>";
          format-volume-padding = 1;
          format-volume-foreground = secondary;
          format-volume-background = tertiary;
          label-volume = "%percentage%%";

          format-muted = "<label-muted>";
          format-muted-padding = 1;
          format-muted-foreground = secondary;
          format-muted-background = tertiary;
          format-muted-prefix = "婢 ";
          format-muted-prefix-foreground = urgency;
          format-muted-overline = bg;

          label-muted = "VOL Muted";
        };

        "module/battery" = {
          type = "internal/battery";
          full-at = 101; # to disable it
          battery = "BAT0"; # TODO: Better way to fill this
          adapter = "AC0";

          poll-interval = 2;

          label-full = " 100%";
          format-full-padding = 1;
          format-full-foreground = secondary;
          format-full-background = primary;

          format-charging = " <animation-charging> <label-charging>";
          format-charging-padding = 1;
          format-charging-foreground = secondary;
          format-charging-background = primary;
          label-charging = "%percentage%% +%consumption%W";
          animation-charging-0 = "";
          animation-charging-1 = "";
          animation-charging-2 = "";
          animation-charging-3 = "";
          animation-charging-4 = "";
          animation-charging-framerate = 500;

          format-discharging = "<ramp-capacity> <label-discharging>";
          format-discharging-padding = 1;
          format-discharging-foreground = secondary;
          format-discharging-background = primary;
          label-discharging = "%percentage%% -%consumption%W";
          ramp-capacity-0 = "";
          ramp-capacity-0-foreground = urgency;
          ramp-capacity-1 = "";
          ramp-capacity-1-foreground = urgency;
          ramp-capacity-2 = "";
          ramp-capacity-3 = "";
          ramp-capacity-4 = "";
        };

        "module/cpu" = {
          type = "internal/cpu";

          interval = "0.5";

          format = " <label>";
          format-foreground = quaternary;
          format-background = secondary;
          format-padding = 1;

          label = "CPU %percentage%%";
        };

        "module/date" = {
          type = "internal/date";

          interval = "1.0";

          time = "%H:%M:%S";
          time-alt = "%Y-%m-%d%";

          format = "<label>";
          format-padding = 4;
          format-foreground = fg;

          label = "%time%";
        };

        "module/i3" = {
          type = "internal/i3";
          pin-workspaces = false;
          strip-wsnumbers = true;
          format = "<label-state> <label-mode>";
          format-background = tertiary;

          ws-icon-0 = "1;";
          ws-icon-1 = "2;";
          ws-icon-2 = "3;﬏";
          ws-icon-3 = "4;ﭮ";
          ws-icon-4 = "5;";
          ws-icon-5 = "6;";
          ws-icon-6 = "7;";
          ws-icon-7 = "8;";
          ws-icon-8 = "9;";
          ws-icon-9 = "10;";

          label-mode = "%mode%";
          label-mode-padding = 1;

          label-unfocused = "%icon%";
          label-unfocused-foreground = quinternary;
          label-unfocused-padding = 1;

          label-focused = "%index% %icon%";
          label-focused-font = 2;
          label-focused-foreground = secondary;
          label-focused-padding = 1;

          label-visible = "%icon%";
          label-visible-padding = 1;

          label-urgent = "%index%";
          label-urgent-foreground = urgency;
          label-urgent-padding = 1;

          label-separator = "";
        };

        "module/title" = {
          type = "internal/xwindow";
          format = "<label>";
          label = "%title%";
          label-maxlen = 70;
        };

        "module/memory" = {
          type = "internal/memory";

          interval = 3;

          format = " <label>";
          format-background = tertiary;
          format-foreground = secondary;
          format-padding = 1;

          label = "RAM %percentage_used%%";
        };

        "module/network" = {
          type = "internal/network";
          interface = "enp3s0";

          interval = "1.0";

          accumulate-stats = true;
          unknown-as-up = true;

          format-connected = "<label-connected>";
          format-connected-background = mf;
          format-connected-underline = bg;
          format-connected-overline = bg;
          format-connected-padding = 2;
          format-connected-margin = 0;

          format-disconnected = "<label-disconnected>";
          format-disconnected-background = mf;
          format-disconnected-underline = bg;
          format-disconnected-overline = bg;
          format-disconnected-padding = 2;
          format-disconnected-margin = 0;

          label-connected = "D %downspeed:2% | U %upspeed:2%";
          label-disconnected = "DISCONNECTED";
        };

        "module/temperature" = {
          type = "internal/temperature";

          interval = "0.5";

          thermal-zone = 0; # TODO: Find a better way to fill that
          warn-temperature = 60;
          units = true;

          format = "<label>";
          format-background = mf;
          format-underline = bg;
          format-overline = bg;
          format-padding = 2;
          format-margin = 0;

          format-warn = "<label-warn>";
          format-warn-background = mf;
          format-warn-underline = bg;
          format-warn-overline = bg;
          format-warn-padding = 2;
          format-warn-margin = 0;

          label = "TEMP %temperature-c%";
          label-warn = "TEMP %temperature-c%";
          label-warn-foreground = "#f00";
        };

        "module/powermenu" = {
          type = "custom/menu";
          expand-right = true;

          format = "<label-toggle> <menu>";
          format-background = secondary;
          format-padding = 1;

          label-open = "";
          label-close = "";
          label-separator = "  ";

          menu-0-0 = " Suspend";
          menu-0-0-exec = "systemctl suspend";
          menu-0-1 = " Reboot";
          menu-0-1-exec = "systemctl reboot";
          menu-0-2 = " Shutdown";
          menu-0-2-exec = "systemctl poweroff";
        };

        #"module/wireless-network" = {
        #  type = "internal/network";
        #  interval = "wlp2s0";
        #};

  #--------------------SOLID TRANSITIONS--------------------#

        "module/dsPT" = {
          type = "custom/text";
          content = "";
          content-background = primary;
          content-foreground = tertiary;
        };

        "module/dsTS" = {
          type = "custom/text";
          content = "";
          content-background = tertiary;
          content-foreground = secondary;
        };

        "module/dsST" = {
          type = "custom/text";
          content = "";
          content-background = secondary;
          content-foreground = tertiary;
        };

        "module/daPT" = {
          type = "custom/text";
          content = "";
          content-background = primary;
          content-foreground = tertiary;
        };

        "module/daTP" = {
          type = "custom/text";
          content = "";
          content-background = tertiary;
          content-foreground = primary;
        };

        "module/daST" = {
          type = "custom/text";
          content = "";
          content-background = secondary;
          content-foreground = tertiary;
        };

        "module/daTS" = {
          type = "custom/text";
          content = "";
          content-background = secondary;
          content-foreground = primary;
        };

        "module/daSP" = {
          type = "custom/text";
          content = "";
          content-background = secondary;
          content-foreground = primary;
        };

  #--------------------GAPS TRANSITIONS--------------------#

        "module/dulT" = {
          type = "custom/text";
          content = "";
          content-foreground = tertiary;
          content-background = bg;
        };

        "module/ddrT" = {
          type = "custom/text";
          content = "";
          content-foreground = tertiary;
          content-background = bg;
        };

        "module/ddlT" = {
          type = "custom/text";
          content = "";
          content-foreground = tertiary;
          content-background = bg;
        };

        "module/durT" = {
          type = "custom/text";
          content = "";
          content-foreground = tertiary;
          content-background = bg;
        };

        "module/ddlP" = {
          type = "custom/text";
          content = "";
          content-foreground = primary;
          content-background = bg;
        };

        "module/durP" = {
          type = "custom/text";
          content = "";
          content-foreground = primary;
          content-background = bg;
        };

        "module/dulP" = {
          type = "custom/text";
          content = "";
          content-foreground = primary;
          content-background = bg;
        };

        "module/ddrP" = {
          type = "custom/text";
          content = "";
          content-foreground = primary;
          content-background = bg;
        };

        "module/dulS" = {
          type = "custom/text";
          content = "";
          content-foreground = secondary;
          content-background = bg;
        };

        "module/ddlS" = {
          type = "custom/text";
          content = "";
          content-foreground = secondary;
          content-background = bg;
        };

        "module/durS" = {
          type = "custom/text";
          content = "";
          content-foreground = secondary;
          content-background = bg;
        };

        "module/ddrS" = {
          type = "custom/text";
          content = "";
          content-foreground = secondary;
          content-background = bg;
        };
      };
    };
  }

#+END_SRC
**** Rofi
#+BEGIN_SRC nix :tangle ./users/jak/home/rofi.nix

{ config, pkgs, ... }:

# This file contains the configuration for rofi.

{
  home.sessionVariables = { "LAUNCHER" = "${pkgs.rofi}/bin/rofi_drun"; };

  programs.rofi = {
    enable = true;
    font = "Iosevka 12";
    terminal = "${pkgs.alacritty}/bin/alacritty";
    theme = "Arc-Dark";
  };
}

# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Starship
#+BEGIN_SRC nix :tangle ./users/jak/home/starship.nix

{ config, pkgs, ... }:

# This file contains the configuration for starship

let
  colors = config.unitas.jak.colorScheme;
in
  {
  programs.starship = {
    enable = true;
    enableBashIntegration = false;
    enableFishIntegration = true;
    package = pkgs.unstable.starship;
    settings = with colours; {
      "aws"."disabled" = true;
      "battery"."disabled" = true;
      "character" = {
        "style_success" = "#${basic.magenta}";
        "style_failure" = "#${basic.red}";
      };
      "cmd_duration"."style" = "#${basic.yellow}";
      "conda"."disabled" = true;
      "directory" = {
        "style" = "#${basic.blue}";
        "truncation_length" = 8;
        "truncate_to_repo" = false;
      };
      "dotnet"."disabled" = true;
      "env_var"."disabled" = true;
      "git_branch" = {
        "symbol" = "";
        "style" = "#${starship.mutedGrey}";
      };
      "git_commit" = {
        "disabled" = false;
        "style" = "#${starship.mutedGrey}";
      };
      "git_state" = {
        "rebase" = "rebasing";
        "merge" = "merging";
        "revert" = "reverting";
        "cherry_pick" = "cherry-picking";
        "bisect" = "bisecting";
        "am" = "am";
        "am_or_rebase" = "am/rebasing";
        "style" = "#${basic.yellow}";
      };
      "git_status" = {
        "ahead" = "↑";
        "behind" = "↓";
        "conflicted" = "✖";
        "deleted" = "";
        "diverged" = "⇅";
        "modified" = "※";
        "prefix" = "(";
        "renamed" = "";
        "staged" = "";
        "stashed" = "";
        "style" = "#${starship.mutedGrey}";
        "suffix" = ") ";
        "untracked" = "";
      };
      "golang"."disabled" = true;
      "hg_branch"."disabled" = true;
      "hostname"."style" = "#${basic.green}";
      "java"."disabled" = true;
      "jobs" = {
        "style" = "#${basic.black}";
        "symbol" = "";
        "threshold" = 0;
      };
      "kubernetes"."disabled" = true;
      "memory_usage"."disabled" = true;
      "nix_shell" = {
        "style" = "#${basic.red}";
        "use_name" = true;
      };
      "nodejs"."disabled" = true;
      "package"."disabled" = true;
      "php"."disabled" = true;
      "prompt"."scan_timeout" = 10;
      "python"."disabled" = true;
      "ruby"."disabled" = true;
      "rust"."disabled" = true;
      "terraform"."disabled" = true;
      "time"."disabled" = true;
      "username" = {
        "style_root" = "#${basic.red}";
        "style_user" = "#${basic.yellow}";
      };
    };
  };
}

# vim:filesystem=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** SXHKD
#+BEGIN_SRC nix :tangle ./users/jak/home/sxhkd.nix

{ config, pkgs, ...}:

# This file contains the configuration for sxhkd.
let
  var = config.home.sessionVariables;
in
{
  services.sxhkd = {
    enable = true;
    keybindings = {
      "super + Return" = "${var.TERMINAL}";
      "super + d" = "rofi_drun"; #need to change to "launcher" variable
      "super + w" = "${var.BROWSER}";
    };
  };
}
# vim:filesystem=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Termite
#+BEGIN_SRC nix :tangle ./users/jak/home/termite.nix

{ config, pkgs, ...}:

# This file contains the configuration for termite.

{
  home.sessionVariables = { "TERMINAL" = "${pkgs.termite}/bin/termite"; };

  programs.termite.enable = true;

}
# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** Tmux
#+BEGIN_SRC nix :tangle ./users/jak/home/tmux.nix

{ config, pkgs, ... }:

# This file contains the configuration for tmux.

let
  # This script prints the username and hostname of a host if there is an
  # active SSH connection, otherwise, it prints nothing.
  statuslineSsh = let
    name = "tmux-statusline-ssh";
    dir = pkgs.writeScriptBin name ''
      #! ${pkgs.runtimeShell} -e
      ${pkgs.unstable.tmux}/bin/tmux show-environment -g SSH_CONNECTION &>/dev/null
      if [ $? -eq 0 ]; then
        printf "`${pkgs.coreutils}/bin/whoami`@`${pkgs.inetutils}/bin/hostname`"
      fi
    '';
  in
    "${dir}/bin/${name}";
in
{
  programs.tmux = {
    customPaneNavigationAndResize = true;
    enable = true;
    escapeTime = 0;
    extraConfig = ''
      # Enable the mouse.
      set -g mouse on
      # Enable focus events.
      set -g focus-events on
      # Automatically rename window titles.
      setw -g automatic-rename on
      set -g set-titles on
      # Automatically renumber windows when a window is closed.
      set -g renumber-windows on
      # Better bindings for splitting panes.
      bind | split-window -h
      bind - split-window -v
      # Sync input between panes.
      bind S set-window-option synchronize-panes
      # Clear screen.
      bind C-l send-keys 'C-l'
      # Select windows.
      bind -r C-h select-window -t :-
      bind -r C-l select-window -t :+
      # Change word separators to better match Vim.
      set -g word-separators "<>(){}[]/'\";@*+,.-_=!£$%^&:#~?`¬|\\ "
      # Update these variables from the environment when attaching to tmux.
      set -g update-environment "SSH_AUTH_SOCK SSH_CLIENT SSH_CONNECTION DISPLAY LOCALE_ARCHIVE LANG LANGUAGE LC_ALL"
      # Use 24-bit colour.
      set -ga terminal-overrides ",xterm-256color:Tc"
      # Statusline
      set -g status-style fg=brightblack
      set -g status-justify left
      set -g status-left ' #S #{?client_prefix,#[fg=brightyellow]⬣ ,}'
      set -g status-left-length 60
      set -g status-right '#(${statuslineSsh}) #[fg=brightblack]%H:%M:%S '
      set -g status-right-length 60
      set -g message-style fg=white,bright
      set -g pane-active-border-style fg=white
      set -g pane-border-style fg=brightblack
      setw -g window-status-style fg=white
      setw -g window-status-format ' #W #{?pane_synchronized,#[fg=red]⬣ ,}#{?window_zoomed_flag,#[fg=blue]⬣ ,}'
      setw -g window-status-current-style fg=brightwhite
      setw -g window-status-current-format ' #W #{?pane_synchronized,#[fg=brightred]⬣ ,}#{?window_zoomed_flag,#[fg=brightblue]⬣ ,}'
    '';
    keyMode = "vi";
    package = pkgs.unstable.tmux;
    plugins = with pkgs.unstable; [
      {
        plugin = tmuxPlugins.mkDerivation {
          # Script is named differently from the plugin.
          pluginName = "scroll_copy_mode";
          src = (import ../../../nix/sources.nix).tmux-better-mouse-mode;
        };
      }
      { plugin = tmuxPlugins.fzf-tmux-url; }
      { plugin = tmuxPlugins.logging; }
      { plugin = tmuxPlugins.copycat; }
      { plugin = tmuxPlugins.vim-tmux-navigator; }
      { plugin = tmuxPlugins.yank; }
    ];
    secureSocket = !config.unitas.jak.dotfiles.isWsl;
    sensibleOnTop = true;
    terminal = "xterm-256color";
  };
}

# vim:filetype=nix:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
**** xsession
#+BEGIN_SRC nix :tangle ./users/jak/home/xsession.nix

{ config, pkgs, ... }:

# This file contains the configuration for the Xsession.

let
  cfg = config.unitas.jak;
in {
  xsession = {
    enable = !cfg.dotfiles.headless;
    initExtra = ''
      # Set wallpaper.
    '';
    pointerCursor = {
      package = pkgs.vanilla-dmz;
      name = "Vanilla-DMZ-AA";
      size = 24;
    };
  };
}

# vim:foldmethod=marker:foldlevel=0:ts=2:sts=2:sw=2:nowrap
#+END_SRC
